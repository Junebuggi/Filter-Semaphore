Design Goals
Name: Emma Boulay

Goal 1: Create a shared memory segment using shmget and then make this shared memory
	accessible to the program. The purpose of this is so the child processes are able to 
	access and update the character array and the array can be accessed (with the proper 
	updates) in the parent process to be printed

Goal 2: To use semaphores to ensure mutual exclusion and critical sections are protected. 
	The critical section is in the child process where it will swap variables in the
	array. Two semaphores where used. PO only needed the first semaphore and P2 only 
	needed the second semaphore. However since P1's section overlapped with P0 and P2,
	P1 needed both of the semaphores. This meant that P0 and P1 could manipulate the
	character array concurrently as they never touch the same part of the array. However,
	when P1 is manipulating the array, it is the only one allowed.

Goal 3: Able to go into debugging mode if the user wants. This is done by asking the user
	and comparing the scanf result with "yes" and "no". If none of those options are 
	supplied the program will ask again.

Goal 4: Able to run the program with a variety of data. Using command line arguments the program
	is able to run with two different sets of hardcoded data, user data and random data.

Goal 5: For the parent process to wait for all child processes to complete. This was done
	by having the call to wait in a while (nChildProcesses > 0) loop and each time a child
	finished it would decrement the nChildProcesses variable.
